// SPDX-License-Identifier: MIT

/* AUTOGENERATED FILE BY HARDHAT-ZKIT. DO NOT EDIT. */

pragma solidity >=0.7.0 <0.9.0;

contract ActionCircuitGroth16Verifier {
    // @dev scalar field size
    uint256 public constant SCALAR_FIELD_SIZE =
        21888242871839275222246405745257275088548364400416034343698204186575808495617;
    /// @dev base field size
    uint256 public constant BASE_FIELD_SIZE =
        21888242871839275222246405745257275088696311157297823662689037894645226208583;

    /// @dev verification key data
    uint256 public constant ALPHA_X =
        20491192805390485299153009773594534940189261866228447918068658471970481763042;
    uint256 public constant ALPHA_Y =
        9383485363053290200918347156157836566562967994039712273449902621266178545958;
    uint256 public constant BETA_X1 =
        4252822878758300859123897981450591353533073413197771768651442665752259397132;
    uint256 public constant BETA_X2 =
        6375614351688725206403948262868962793625744043794305715222011528459656738731;
    uint256 public constant BETA_Y1 =
        21847035105528745403288232691147584728191162732299865338377159692350059136679;
    uint256 public constant BETA_Y2 =
        10505242626370262277552901082094356697409835680220590971873171140371331206856;
    uint256 public constant GAMMA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant GAMMA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant GAMMA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant GAMMA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;
    uint256 public constant DELTA_X1 =
        11559732032986387107991004021392285783925812861821192530917403151452391805634;
    uint256 public constant DELTA_X2 =
        10857046999023057135944570762232829481370756359578518086990519993285655852781;
    uint256 public constant DELTA_Y1 =
        4082367875863433681332203403145435568316851327593401208105741076214120093531;
    uint256 public constant DELTA_Y2 =
        8495653923123431417604973247489272438418190587263600148770280649306958101930;

    uint256 public constant IC0_X =
        4745899532437744419650138748828035978690291079858134210148837852367486209557;
    uint256 public constant IC0_Y =
        8097181081488469176055268422271429567450651638130364323450325131190542057406;
    uint256 public constant IC1_X =
        17750267525179397208609218183615131430524198643741248937524279767168490510245;
    uint256 public constant IC1_Y =
        13699661163128271353644701768150033403988340798376158944839657521123277527895;
    uint256 public constant IC2_X =
        3742741487626080558739394345146614301924465612387975946178140170381693140834;
    uint256 public constant IC2_Y =
        3151034960553830205960446787889924379286320106471781155279397605807345828903;
    uint256 public constant IC3_X =
        11310777890108700706443155822074009463266364920473382988301378098064908566663;
    uint256 public constant IC3_Y =
        17570024278676978792647036649083754381289640031650422565612907892938873880227;
    uint256 public constant IC4_X =
        14443251507005278515559792726441628607347202244061168562145886964993558480273;
    uint256 public constant IC4_Y =
        18060490405953098397827158650338161304321736816411302702826664619137323230270;
    uint256 public constant IC5_X =
        4783091226387198524754981707658221093560084421942492252991004675115124532533;
    uint256 public constant IC5_Y =
        5960215469139643216420364133672085470420861998415239724728027448814603748026;
    uint256 public constant IC6_X =
        5470167783938127007464277345037412819720574377200587858638709468796771948495;
    uint256 public constant IC6_Y =
        21751193619338483912694742695792564097521755543286432552016134326965348338714;
    uint256 public constant IC7_X =
        35182974798707971516393892768040840665591688751311387236662783299408078288;
    uint256 public constant IC7_Y =
        20526767820778069017124250884624736504123468887974085968747085724200584564652;
    uint256 public constant IC8_X =
        8780003268317537680150979818841068782620493425606635078470176400223181642418;
    uint256 public constant IC8_Y =
        1098644047058039985745899435380076369196777919457676395619079801755055062366;
    uint256 public constant IC9_X =
        8866728383560896278599317199236221085057290293370798532116231767015624641931;
    uint256 public constant IC9_Y =
        9155744187048463481908296725501950513219863402498130270053755964241641593584;
    uint256 public constant IC10_X =
        14104838425713673437189987773962366647433342737894780485522738373411827502630;
    uint256 public constant IC10_Y =
        17723374432867801899734891358020076702604188295148296427750168831975090580067;
    uint256 public constant IC11_X =
        20688542350767483114943590502352135091358525549597923379984845890312112017402;
    uint256 public constant IC11_Y =
        1148949568325348914062685875138223412089228362832818543156881597079045578191;
    uint256 public constant IC12_X =
        11285870687461666619758533567268827001762529335289697458384699128660721273625;
    uint256 public constant IC12_Y =
        5623913910482342899876284619588794113656823647715996963349815734835708687316;
    uint256 public constant IC13_X =
        21695129992107735420321035361552602764160802712201225826709344252809434224402;
    uint256 public constant IC13_Y =
        12720424778044526678235478292271657628616267591171696014384582993068011409712;
    uint256 public constant IC14_X =
        7372693837090953556621038860049571745352802632260761885458536865106016077477;
    uint256 public constant IC14_Y =
        6738047284029500505334253210869605183708966399194683326025867511382743961665;
    uint256 public constant IC15_X =
        5311912849728652851164888508451900553734282708448934504684331332945844270644;
    uint256 public constant IC15_Y =
        9698065767614934652411461630392664115354778429638021427042269397635596108672;
    uint256 public constant IC16_X =
        3381327161852894913461994412101204882530213856903766807926899750610256742706;
    uint256 public constant IC16_Y =
        19822766714621344126636659308238819193255847866646503072286949771419318542678;
    uint256 public constant IC17_X =
        5586697646855548598997545306604557517259940371785766283287274725486533164244;
    uint256 public constant IC17_Y =
        6621472862102173348220181887201958782579597787832965991454054516902647678086;
    uint256 public constant IC18_X =
        709647142424791342907235803989257187461758630192365162288146995436804066771;
    uint256 public constant IC18_Y =
        1925579865750273310367597542575149336489827692601080623346577668378298406887;
    uint256 public constant IC19_X =
        20611925308724954798589565683739955299260329435413092638081483840135302941413;
    uint256 public constant IC19_Y =
        6028449008715797522510842754607028519475560551039861698960168764020946564557;
    uint256 public constant IC20_X =
        19343729301688202486099577766817788754863332012725348629150622945771802619230;
    uint256 public constant IC20_Y =
        20112904024432548947951450372569500478763368056220264842883010966309612469493;
    uint256 public constant IC21_X =
        12864447040528221980159807349389785254614010404139794995068648603105944005347;
    uint256 public constant IC21_Y =
        19419052649845579789177462363576634461437333292008662680523584940923103803071;
    uint256 public constant IC22_X =
        11740982213954559866105676175111881434200350535122013081039639726185270245668;
    uint256 public constant IC22_Y =
        17750278135680715917262938337599973877082829329338248643504595419117495024151;
    uint256 public constant IC23_X =
        4523246608009903763410420722383839304196269843743089442500944319996570496629;
    uint256 public constant IC23_Y =
        13208124339561727066975019608327004990685586932142758438874392255074906969383;
    uint256 public constant IC24_X =
        6141317114668222425740591202154084949248129057325541177164629710936643731734;
    uint256 public constant IC24_Y =
        17801566626992945352967484764308943461842390183283869656629388981784873308623;
    uint256 public constant IC25_X =
        2739141342658860753675406513492813792368010435251900434901916526188762361557;
    uint256 public constant IC25_Y =
        1718073314165617590646748569373626595179116204886619664420773494341065377232;
    uint256 public constant IC26_X =
        16418582596564547205302777842941146455111590528819274014426866549178630938088;
    uint256 public constant IC26_Y =
        13211872773591785752808850490749382264194154154133406019546915151613562956660;
    uint256 public constant IC27_X =
        998928549210981496919355660554364793863882520854887634467614787557748710027;
    uint256 public constant IC27_Y =
        2032805179190063358070349153353592169921721205555562253569861398638230002711;
    uint256 public constant IC28_X =
        15556461699082952158187453083430594899169451098377138006120396890040366680900;
    uint256 public constant IC28_Y =
        9896901085307231878984270751734984595854556430986721061558512522846541681678;
    uint256 public constant IC29_X =
        142729976009346346196307060462765273366015009360405007827919398613834548956;
    uint256 public constant IC29_Y =
        9886034888614318575617358201739397912477088285444003077479112659672845822588;
    uint256 public constant IC30_X =
        7679206003274271368146369688089677880956857596600197893294489220271955708684;
    uint256 public constant IC30_Y =
        15463872742931042713590802808829166216296680480299991398439718144843175784773;
    uint256 public constant IC31_X =
        21855294516403700742169975334740054603589816393672076656247661159224407273135;
    uint256 public constant IC31_Y =
        14020108605833896717188907614707936042457092919385768035431193214014085587720;
    uint256 public constant IC32_X =
        14747796151270923969463945095036566015255201174502500934492143549792848342538;
    uint256 public constant IC32_Y =
        19934284313086475279179442411806333638666530353589994864165953858444513732486;
    uint256 public constant IC33_X =
        4540279595248381697944313725001808417398491097342272249467102925679483180351;
    uint256 public constant IC33_Y =
        13922692839994735552883218866924360946987006935127425796936509635600493276919;
    uint256 public constant IC34_X =
        20632462910228755430997401333608956938106426200385623239455801214479262693261;
    uint256 public constant IC34_Y =
        19985423012931189972040034057813846147672408036084747966320319698905022584688;
    uint256 public constant IC35_X =
        15782320595802261975347826852338869502014495107214753351820442049589582301954;
    uint256 public constant IC35_Y =
        18813062486914488026225455775692184169242256187014058170063002260176011560066;
    uint256 public constant IC36_X =
        17589939565747695639664958775590296979242352796112703720933766632567434943592;
    uint256 public constant IC36_Y =
        885906452830435514951232589419045468951121344722701026517859447455488425875;
    uint256 public constant IC37_X =
        5180987962113217220462060089373453405359912328226499282024504621486491450643;
    uint256 public constant IC37_Y =
        1893783394518272359915854464619397323732690183669639764200098718867235894126;
    uint256 public constant IC38_X =
        17372725548627847035526604281348679331232301884094377748776104165262903380441;
    uint256 public constant IC38_Y =
        2314796256270418324919251979672844655867614447317198818355342836148327659553;
    uint256 public constant IC39_X =
        18619277591880872981627615069504447807987037969430891012162753407438277742978;
    uint256 public constant IC39_Y =
        21070689674778125668165329429739781188360810341156097839130484661892361748152;
    uint256 public constant IC40_X =
        3944041072500377345793382265557457634264022192293725925695041069762970014059;
    uint256 public constant IC40_Y =
        18890722995668928324561745623196595461973802533432104401424429597955777871167;
    uint256 public constant IC41_X =
        13739393115342805754214355969991410516656803920987163502593040456305383590266;
    uint256 public constant IC41_Y =
        21460752284601197940142136512615112397932864449316602618502681765083390897697;
    uint256 public constant IC42_X =
        7320322696789102732325984938881335595260605855138087013535216582136312007790;
    uint256 public constant IC42_Y =
        6648581209481909441499904156548891139935728397216041174704263069328331759118;
    uint256 public constant IC43_X =
        19755243563068606126528010782273596807490137374552932384980989473684457715353;
    uint256 public constant IC43_Y =
        19709251754251183537463605304866668375039256278840104176274896376963140544439;
    uint256 public constant IC44_X =
        16424832493919407942800473110525568151756494196385686561267660978871654792965;
    uint256 public constant IC44_Y =
        156133065803384140674053629722540263704258574418358166973428600956803858275;
    uint256 public constant IC45_X =
        7939226071133010014999920912450199826186712005862851700407375911258109170009;
    uint256 public constant IC45_Y =
        21724645317211329083224462898225863672375573438841993541005387662809008144848;
    uint256 public constant IC46_X =
        16471484311900630538398925351132933026760687467350359591195360104039058347877;
    uint256 public constant IC46_Y =
        19343947586904886620177509408144746247429237216227759134557991723561964688818;
    uint256 public constant IC47_X =
        16587292231972289335148314016154323799291518486897150451906619280709019157573;
    uint256 public constant IC47_Y =
        14486225034400171152080557275838138040211084298571441114818087826340654457933;
    uint256 public constant IC48_X =
        1300887514679508871933263636250878952512946463619439617035454212180803991640;
    uint256 public constant IC48_Y =
        2076724750529536481102413490405890117954132277438163111586354766670551707889;
    uint256 public constant IC49_X =
        17045651374665097687781051511844258947109130895122597088244978635368827299584;
    uint256 public constant IC49_Y =
        20073684729693280558540721908343274368685234807394432265334222686821939260402;
    uint256 public constant IC50_X =
        6999797100550141002880236063199328280640397207491070544121381795602104326632;
    uint256 public constant IC50_Y =
        18999109971486570748491089771034887158869843516264179948103595438106578050761;
    uint256 public constant IC51_X =
        6314087177460198549425133991444707788778093321377704196137003810691011265108;
    uint256 public constant IC51_Y =
        10423976917174549551352124544269222143409284467400990752995985233205441385132;
    uint256 public constant IC52_X =
        14373846996717441298327344189784837747075157971891977124019310638086631525631;
    uint256 public constant IC52_Y =
        7285884355221340240604173359113698694147771046878864527656676211978737337938;
    uint256 public constant IC53_X =
        18555003326332474231918692249000045267838299247809193185011422793108904571067;
    uint256 public constant IC53_Y =
        1834461201935834220005621755001349492360487041257793508926583445069569001032;
    uint256 public constant IC54_X =
        6869468925263028739541263070800095686948716314079472051399111713225921907766;
    uint256 public constant IC54_Y =
        7489477358005708076217586385396671455861700208817604819605925757271093027977;
    uint256 public constant IC55_X =
        8698244923964845903555053731213256347487216768689232392466516826507455278662;
    uint256 public constant IC55_Y =
        7257247896401525894468623967804869972337984179482632578643416412113873117552;
    uint256 public constant IC56_X =
        12702091344982389095466568083620061107177136464526333226927121644928024050607;
    uint256 public constant IC56_Y =
        13904665308284664168425239991048821074766626359742872924403033378143303980558;
    uint256 public constant IC57_X =
        11750796819763885956761663143459918020478939805701694787220475291212453250678;
    uint256 public constant IC57_Y =
        20181985375516240029045180794966621587367348263290661919797198609459941706127;
    uint256 public constant IC58_X =
        3589473616198070835380292931821861057820195469814378330548536854807302180663;
    uint256 public constant IC58_Y =
        1073995338817191009790367511882764602010254575906097804396620940720788085720;
    uint256 public constant IC59_X =
        2305907938848925424261411993131263855566567994910234024390814840126714206543;
    uint256 public constant IC59_Y =
        2097823806036213907062988824379650995599741168477694770905033831903678984735;
    uint256 public constant IC60_X =
        8717114430447951983799804011344967976743699747815292435186724823030795811918;
    uint256 public constant IC60_Y =
        13723977535316091993573794331765528898108205690417285478282637886004708555089;
    uint256 public constant IC61_X =
        13280434423279866128884842577492213602986138601626326318887218771006563684740;
    uint256 public constant IC61_Y =
        19058565313782133848852814476571417880047967311178248223724056605152573476625;
    uint256 public constant IC62_X =
        16615984642204227155166884957084696192715158398298947818494837117008546622563;
    uint256 public constant IC62_Y =
        19180592735234294182163888734470464622426088488228224337434953851849843807361;
    uint256 public constant IC63_X =
        5018536584910186200067938932391044819926420871138864915219120696715717470245;
    uint256 public constant IC63_Y =
        4227317337569218973744180201246185091702980804268407115662407870275005842778;
    uint256 public constant IC64_X =
        15132385792793770946635266170083514894336836616335054171201219885292664134955;
    uint256 public constant IC64_Y =
        21472299809914836459370633226787881630836064805387136886625342482935171857061;
    uint256 public constant IC65_X =
        9061496543407227571307593456822682629066453698917450494091682702766450799891;
    uint256 public constant IC65_Y =
        15577909701292070785991274035699633288964429664821257841824111941977285007239;
    uint256 public constant IC66_X =
        11324069007181762133936008479694776704962812774797432715242333689076655225553;
    uint256 public constant IC66_Y =
        3310725900294656617402365157737515718846986430663308196679740292476387150104;
    uint256 public constant IC67_X =
        21713869608405903864110078608533364257452382592492469563470674167244903195272;
    uint256 public constant IC67_Y =
        13664604141196918964306751570768678347726392876737832078787884281311210496322;
    uint256 public constant IC68_X =
        17529228569402981806083983472277191587904625722259102510907006260209703668501;
    uint256 public constant IC68_Y =
        15710820163113275004591259379154364071925952699137063184107802293586450333611;
    uint256 public constant IC69_X =
        17227236702817594535314892520126849701421225425985943109287472213348067202527;
    uint256 public constant IC69_Y =
        9290236068875447041958249366744022434606364099410134897902978627411130850086;
    uint256 public constant IC70_X =
        12205730200356279609695013790507008763577440222863766355426334450106981216411;
    uint256 public constant IC70_Y =
        20893481815600682310278696591034098979507822997686690496740631261543799597346;
    
    /// @dev memory pointer sizes
    uint16 public constant P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE = 128;
    uint16 public constant P_TOTAL_SIZE = 896;

    function verifyProof(
        uint256[2] memory pointA_,
        uint256[2][2] memory pointB_,
        uint256[2] memory pointC_,
        uint256[70] memory publicSignals_
    ) public view returns (bool verified_) {
        assembly {
            function checkField(signal_) -> res_ {
                res_ := lt(signal_, SCALAR_FIELD_SIZE)
            }

            function g1MulAdd(pR_, x_, y_, s_) -> res_ {
                let pointer_ := mload(64) // free pointer

                mstore(pointer_, x_)
                mstore(add(pointer_, 32), y_)
                mstore(add(pointer_, 64), s_)

                res_ := staticcall(6000, 7, pointer_, 96, pointer_, 64) // ecMul
                res_ := and(res_, gt(returndatasize(), 0)) // check that multiplication succeeded

                if iszero(res_) {
                    leave
                }

                mstore(add(pointer_, 64), mload(pR_))
                mstore(add(pointer_, 96), mload(add(pR_, 32)))

                res_ := staticcall(150, 6, pointer_, 128, pR_, 64) // ecAdd
                res_ := and(res_, gt(returndatasize(), 0)) // check that addition succeeded
            }

            function checkPairing(pA_, pB_, pC_, pubSignals_, pointer_) -> res_ {
                let pPairing_ := add(pointer_, P_PUBLIC_SIGNALS_ACCUMULATOR_SIZE)

                mstore(pointer_, IC0_X)
                mstore(add(pointer_, 32), IC0_Y)

                /// @dev compute the linear combination of public signals
                if iszero(g1MulAdd(pointer_, IC1_X, IC1_Y, mload(add(pubSignals_, 0)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC2_X, IC2_Y, mload(add(pubSignals_, 32)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC3_X, IC3_Y, mload(add(pubSignals_, 64)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC4_X, IC4_Y, mload(add(pubSignals_, 96)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC5_X, IC5_Y, mload(add(pubSignals_, 128)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC6_X, IC6_Y, mload(add(pubSignals_, 160)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC7_X, IC7_Y, mload(add(pubSignals_, 192)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC8_X, IC8_Y, mload(add(pubSignals_, 224)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC9_X, IC9_Y, mload(add(pubSignals_, 256)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC10_X, IC10_Y, mload(add(pubSignals_, 288)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC11_X, IC11_Y, mload(add(pubSignals_, 320)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC12_X, IC12_Y, mload(add(pubSignals_, 352)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC13_X, IC13_Y, mload(add(pubSignals_, 384)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC14_X, IC14_Y, mload(add(pubSignals_, 416)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC15_X, IC15_Y, mload(add(pubSignals_, 448)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC16_X, IC16_Y, mload(add(pubSignals_, 480)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC17_X, IC17_Y, mload(add(pubSignals_, 512)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC18_X, IC18_Y, mload(add(pubSignals_, 544)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC19_X, IC19_Y, mload(add(pubSignals_, 576)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC20_X, IC20_Y, mload(add(pubSignals_, 608)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC21_X, IC21_Y, mload(add(pubSignals_, 640)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC22_X, IC22_Y, mload(add(pubSignals_, 672)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC23_X, IC23_Y, mload(add(pubSignals_, 704)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC24_X, IC24_Y, mload(add(pubSignals_, 736)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC25_X, IC25_Y, mload(add(pubSignals_, 768)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC26_X, IC26_Y, mload(add(pubSignals_, 800)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC27_X, IC27_Y, mload(add(pubSignals_, 832)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC28_X, IC28_Y, mload(add(pubSignals_, 864)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC29_X, IC29_Y, mload(add(pubSignals_, 896)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC30_X, IC30_Y, mload(add(pubSignals_, 928)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC31_X, IC31_Y, mload(add(pubSignals_, 960)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC32_X, IC32_Y, mload(add(pubSignals_, 992)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC33_X, IC33_Y, mload(add(pubSignals_, 1024)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC34_X, IC34_Y, mload(add(pubSignals_, 1056)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC35_X, IC35_Y, mload(add(pubSignals_, 1088)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC36_X, IC36_Y, mload(add(pubSignals_, 1120)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC37_X, IC37_Y, mload(add(pubSignals_, 1152)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC38_X, IC38_Y, mload(add(pubSignals_, 1184)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC39_X, IC39_Y, mload(add(pubSignals_, 1216)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC40_X, IC40_Y, mload(add(pubSignals_, 1248)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC41_X, IC41_Y, mload(add(pubSignals_, 1280)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC42_X, IC42_Y, mload(add(pubSignals_, 1312)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC43_X, IC43_Y, mload(add(pubSignals_, 1344)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC44_X, IC44_Y, mload(add(pubSignals_, 1376)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC45_X, IC45_Y, mload(add(pubSignals_, 1408)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC46_X, IC46_Y, mload(add(pubSignals_, 1440)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC47_X, IC47_Y, mload(add(pubSignals_, 1472)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC48_X, IC48_Y, mload(add(pubSignals_, 1504)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC49_X, IC49_Y, mload(add(pubSignals_, 1536)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC50_X, IC50_Y, mload(add(pubSignals_, 1568)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC51_X, IC51_Y, mload(add(pubSignals_, 1600)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC52_X, IC52_Y, mload(add(pubSignals_, 1632)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC53_X, IC53_Y, mload(add(pubSignals_, 1664)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC54_X, IC54_Y, mload(add(pubSignals_, 1696)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC55_X, IC55_Y, mload(add(pubSignals_, 1728)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC56_X, IC56_Y, mload(add(pubSignals_, 1760)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC57_X, IC57_Y, mload(add(pubSignals_, 1792)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC58_X, IC58_Y, mload(add(pubSignals_, 1824)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC59_X, IC59_Y, mload(add(pubSignals_, 1856)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC60_X, IC60_Y, mload(add(pubSignals_, 1888)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC61_X, IC61_Y, mload(add(pubSignals_, 1920)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC62_X, IC62_Y, mload(add(pubSignals_, 1952)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC63_X, IC63_Y, mload(add(pubSignals_, 1984)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC64_X, IC64_Y, mload(add(pubSignals_, 2016)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC65_X, IC65_Y, mload(add(pubSignals_, 2048)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC66_X, IC66_Y, mload(add(pubSignals_, 2080)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC67_X, IC67_Y, mload(add(pubSignals_, 2112)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC68_X, IC68_Y, mload(add(pubSignals_, 2144)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC69_X, IC69_Y, mload(add(pubSignals_, 2176)))) {
                    leave
                }
                if iszero(g1MulAdd(pointer_, IC70_X, IC70_Y, mload(add(pubSignals_, 2208)))) {
                    leave
                }
                
                /// @dev -A
                mstore(pPairing_, mload(pA_))
                mstore(
                    add(pPairing_, 32),
                    mod(sub(BASE_FIELD_SIZE, mload(add(pA_, 32))), BASE_FIELD_SIZE)
                )

                /// @dev B
                mstore(add(pPairing_, 64), mload(mload(pB_)))
                mstore(add(pPairing_, 96), mload(add(mload(pB_), 32)))
                mstore(add(pPairing_, 128), mload(mload(add(pB_, 32))))
                mstore(add(pPairing_, 160), mload(add(mload(add(pB_, 32)), 32)))

                /// @dev alpha1
                mstore(add(pPairing_, 192), ALPHA_X)
                mstore(add(pPairing_, 224), ALPHA_Y)

                /// @dev beta2
                mstore(add(pPairing_, 256), BETA_X1)
                mstore(add(pPairing_, 288), BETA_X2)
                mstore(add(pPairing_, 320), BETA_Y1)
                mstore(add(pPairing_, 352), BETA_Y2)

                /// @dev public signals
                mstore(add(pPairing_, 384), mload(pointer_))
                mstore(add(pPairing_, 416), mload(add(pointer_, 32)))

                /// @dev gamma2
                mstore(add(pPairing_, 448), GAMMA_X1)
                mstore(add(pPairing_, 480), GAMMA_X2)
                mstore(add(pPairing_, 512), GAMMA_Y1)
                mstore(add(pPairing_, 544), GAMMA_Y2)

                /// @dev C
                mstore(add(pPairing_, 576), mload(pC_))
                mstore(add(pPairing_, 608), mload(add(pC_, 32)))

                /// @dev delta2
                mstore(add(pPairing_, 640), DELTA_X1)
                mstore(add(pPairing_, 672), DELTA_X2)
                mstore(add(pPairing_, 704), DELTA_Y1)
                mstore(add(pPairing_, 736), DELTA_Y2)

                res_ := staticcall(181000, 8, pPairing_, 768, pPairing_, 32) // ecPairing
                res_ := and(res_, mload(pPairing_)) // check that pairing succeeded
            }

            let pointer_ := mload(64) // free pointer
            mstore(64, add(pointer_, P_TOTAL_SIZE))

            /// @dev check that all public signals are in F
            verified_ := 1
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 0))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 32))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 64))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 96))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 128))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 160))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 192))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 224))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 256))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 288))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 320))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 352))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 384))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 416))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 448))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 480))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 512))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 544))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 576))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 608))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 640))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 672))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 704))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 736))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 768))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 800))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 832))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 864))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 896))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 928))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 960))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 992))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1024))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1056))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1088))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1120))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1152))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1184))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1216))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1248))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1280))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1312))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1344))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1376))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1408))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1440))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1472))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1504))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1536))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1568))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1600))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1632))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1664))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1696))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1728))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1760))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1792))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1824))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1856))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1888))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1920))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1952))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 1984))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2016))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2048))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2080))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2112))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2144))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2176))))
            verified_ := and(verified_, checkField(mload(add(publicSignals_, 2208))))
            
            /// @dev check pairings
            if not(iszero(verified_)) {
                verified_ := checkPairing(pointA_, pointB_, pointC_, publicSignals_, pointer_)
            }
        }
    }
}
